% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/marginal.R
\name{marginal}
\alias{marginal}
\title{Check and evaluate individual candidates}
\usage{
marginal(
  from,
  to,
  ids.to,
  moves = NULL,
  limit = 0.1,
  nkeep = NULL,
  check = TRUE,
  verbose = FALSE
)
}
\arguments{
\item{from}{A list of singletons, the victims.}

\item{to}{A list of pedigrees. The reference families.}

\item{ids.to}{Character vector with names of missing persons.}

\item{moves}{List with possible marginal moves.}

\item{limit}{Double. Lower threshold for LR.}

\item{nkeep}{integer. No of moves to keep, all if `NULL`.}

\item{check}{A logical, indicating if the input data should be checked for consistency.}

\item{verbose}{Logical.}
}
\value{
A list with moves and log likelihoods.
}
\description{
Each potential move is evaluated and the search space reduced.
}
\details{
The potential reduction only affects the list of moves returned, all LRs are kept.
Specifying `nkeep`can give further reduction.
}
\examples{

\donttest{

library(pedtools)

# Attributes of a single marker
loc = list(name = "m", alleles = 1:3)

# Victims
vics = paste0("V", 1:7)
sex = c(1, 1, 1, 1, 1, 1, 2)
df = data.frame(id = vics, fid = 0, mid = 0, sex = sex, 
                m = c("1/1", "2/2", "1/1", "1/1", "2/2", "2/2", "2/2"))
from = as.ped(df, locusAttributes = loc)
names(from) = vics

# Reference families
MPs = c("MP1", "MP2", "MP3")
to = nuclearPed(3, father = "R1", mother = "R2", children = MPs)
data = data.frame(m = c("1/1", "1/1"), row.names = c("R1", "R2"))
to = setMarkers(to, alleleMatrix = data, locusAttributes = loc)

plotPedList(list(from, to), marker = 1)

# moves = list(V1 = c("MP1", "V1", "MP2"), 
#              V3 = c("MP1", "MP2", "MP3"), 
#              V4 = c("V4", "MP3"), 
#              V7 = c("V7"))
#             
# # all 4 * 6 + 1 =possible moves ignoring sex
# moves = list(V1 = c("V1", MPs), V2 = c("V2", MPs), V3 = c("V3", MPs),
#              V4 = c("V4", MPs), V5 = c("V5", MPs), V6 = c("V6", MPs),
#              V7 = c("V7"))
#
# res = marginal(from, to, MPs, moves, limit = 0, verbose = TRUE, nkeep= 2)
 
moves = generateMoves(from, to, MPs)

res = marginal(from, to, MPs, moves, limit = -1, nkeep = 3)
res2 = global(from, to, MPs, moves = res[[1]], limit = 0)
# moves = list(V1 = c("V1", "MP1", "MP2"))
# res = marginal(from, to,  MPs, moves, limit = 1)
}


}
