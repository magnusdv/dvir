% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sequential.R
\name{sequential1}
\alias{sequential1}
\alias{sequential2}
\alias{sequential3}
\title{Sequential DVI search}
\usage{
sequential1(pm, am, MPs, threshold = 1, check = TRUE, verbose = FALSE)

sequential2(pm, am, MPs, threshold = 1, check = TRUE, verbose = FALSE)

sequential3(pm, am, MPs, threshold = 10000, check = TRUE, verbose = FALSE, ...)
}
\arguments{
\item{pm}{PM data: List of singletons.}

\item{am}{AM data: A ped object or list of such.}

\item{MPs}{Character vector with names of the missing persons.}

\item{threshold}{A non-negative number. If no marginal LR values exceed this,
the iteration stops.}

\item{check}{A logical, indicating if the input data should be checked for consistency.}

\item{verbose}{A logical.}

\item{...}{Further arguments.}
}
\value{
A character vector of the same length as `pm`, indicating the
  solution. For example, the result vector `c("MP2", "*", "MP3)` corresponds
  to the assignment `V1 = MP2, V3 = MP3`.
}
\description{
Two sequential approaches based on the marginal LR's are implemented. See
Details for explanations.
}
\details{
Both methods proceed iteratively, always choosing the match `V_i = M_j` with
highest marginal LR. If the maximum is not unique, a random maximiser is chosen.
The two methods differ only in how the LR matrix is updated in each step.

In `sequential1()`, the same marginal matrix is used in all steps, with the
only modification that previously matching individuals are ignored. (After
each identification, the corresponding row and column are set to 0.)

In `sequential2()` the marginal LR matrix is re-computed in each step, after
transferring the identified victim into the AM data.
}
\examples{

pm = example1$pm
am = example1$am
MPs = example1$MPs

sequential1(pm, am, MPs)

sequential2(pm, am, MPs)


}
