% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dviCompare.R
\name{dviCompare}
\alias{dviCompare}
\title{Compare DVI approaches}
\usage{
dviCompare(
  pm,
  am,
  MPs,
  true,
  refs = typedMembers(am),
  methods = 1:4,
  markers = NULL,
  threshold = 1,
  simulate = TRUE,
  db = getFreqDatabase(am),
  Nsim = 1,
  returnSims = FALSE,
  seed = NULL,
  numCores = 1,
  verbose = FALSE
)
}
\arguments{
\item{pm}{PM data: List of singletons}

\item{am}{AM data: A ped object or list of such.}

\item{MPs}{Character vector with names of the missing persons.}

\item{true}{A character of the same length as `pm`, with the true solution,
e.g., `true = c("MP2", "*", "MP3)` if the truth is V1 = MP2 and V3 = MP3.}

\item{refs}{Character vector with names of the reference individuals. By
default the typed members of `am`.}

\item{methods}{A subset of the numbers 1,2,3,4.}

\item{markers}{If `simulate = FALSE`: A vector indicating which markers
should be used.}

\item{threshold}{An LR threshold passed on to the sequential methods.}

\item{simulate}{A logical, indicating if simulations should be performed.}

\item{db}{A frequency database used for simulation, e.g.,
forrel::NorwegianFrequencies. By default the frequencies attached to `am`
are used.}

\item{Nsim}{A positive integer; the number of simulations.}

\item{returnSims}{A logical: If TRUE, the simulated data are returned without
any DVI comparison.}

\item{seed}{A seed for the random number generator, or NULL.}

\item{numCores}{The number of cores used in parallelisation. Default: 1.}

\item{verbose}{A logical.}
}
\value{
A list of solution frequencies for each method, and a vector of true
  positive rates for each method.
}
\description{
The following methods are compared: 1 = sequential (simple); 2 = sequential
(with updates); 3 = sequential + joint; 4 = joint.
}
\examples{

pm = example1$pm
am = example1$am
MPs = example1$MPs
refs = "R1"

db = forrel::NorwegianFrequencies[1:10]

# True solution
true = c("MP1", "MP2", "MP3")

# Run comparison
dviCompare(pm, am, MPs, refs, true = true,
           db = db, Nsim = 2, seed = 123)


# Alternatively, simulations can be done first...
sims = dviCompare(pm, am, MPs, refs, true = true,
                  db = db, Nsim = 2, seed = 123, returnSims = TRUE)

 # ... and computations after:
dviCompare(sims$pm, sims$am, MPs, refs, true = true, simulate = FALSE)

}
