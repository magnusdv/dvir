% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simAge.R
\name{simAge}
\alias{simAge}
\title{Simulation experiment to evaluate age information}
\usage{
simAge(tab, missing, ageM, k = 100, sigma = 2, prior = NULL)
}
\arguments{
\item{tab}{Data frame of assignments.}

\item{missing}{Character vector giveing names of the missing persons.}

\item{ageM}{List with ages of missing persons.}

\item{k}{Double. Unconditional victim ages are assumed uniform on \verb{[0,k]}.}

\item{sigma}{Double.}

\item{prior}{Double vector, default \code{NULL} gives flat prior.}
}
\value{
A data frame. Each row describes an assignment of victims to missing
persons, accompanied with its age based log likelihood, AIC, posterior and a column correct
indicating with a 1 if the assignment from which simulation was done is found.
}
\description{
Missing person ages are simulated, default uniformly on \verb{(0, k)},
but obeying pedigree ordering.
Victim ages are simulated conditional on assignment. If a victim
is not identified by assignment, age is uniform on \verb{(0, k)}.
Otherwise, age of V given V = M, is normal with expectation equal to
age of M and standard deviation sigma. The purpose is to see how well
a given assignment is found based on likelihood and AIC. Also, the posterior is
reported and can be compared to the prior.
}
\examples{
# Load example
pm = example2$pm
am = example2$am
missing = example2$missing
am[1] = setAlleles(am[1],"R1", alleles = 0)
pm[[3]] = swapSex(pm[[3]], "V3")
am[[2]] = swapSex(am[[2]], "M3")
# Generate assignments
miss = c('*', missing)
lst = list(V1 = miss, V2 = miss, V3 = miss)
tab = expand.grid.nodup2(lst, pm, am)
M1 = runif(1, 20, 100)
sigma = 2
M2 = max(M1-20-rnorm(1,0,sigma), 1)
M3 = runif(1, 20, 80)
ageM = list(M1 = M1, M2 = M2, M3 = M3)
res = simAge(tab, missing, ageM)
# Fraction correctly identified:
correct = res$correct
sum(correct)/length(correct)
\dontrun{
date()
nsim = 100
fracCorrect = rep(nsim, nsim)
set.seed(1729)
res = list()
for (i in 1:nsim){
  M1 = runif(1, 20, 100)
  M2 = max(M1-20-rnorm(1, 0, sigma), 1)
  M3 = runif(1, 20, 80)
  ageM = list(M1 = M1, M2 = M2, M3 = M3)
  res[[i]] = simAge(tab, missing, ageM)
  correct = res[[i]]$correct
  fracCorrect[i] = sum(correct)/length(correct)
}
fracCorrect
date()
}
}
\seealso{
\code{\link[=ageAIC]{ageAIC()}}
}
